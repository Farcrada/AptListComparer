#!/usr/bin/env python3
import sys, getopt

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

## Original is to check if the first is original (true), or the second
def checkBigLineWithSmallLine (first, second, original = True):
    result = ""
    current = ""
    difference = 0
    curdiff = 0
    for i, charfirst in enumerate(first):
        if i >= len(second):
            curdiff, current = checkChar(charfirst, '') if original else checkChar('', charfirst)
        else:
            curdiff, current = checkChar(charfirst, second[i]) if original else checkChar(second[i], charfirst)
        
        difference += curdiff
        result += current
    return difference, result

def checkChar(chartocheck, otherchar):
    difference = 0
    if chartocheck == otherchar:
        color = bcolors.OKGREEN
    else:
        difference = 1
        color = bcolors.WARNING
    return difference, f"{color}{chartocheck}{bcolors.END}"

def openAndStripFile(file):
    result = list(filter(None, [x.strip() for x in open(file, 'r').readlines()]))
    if "Listing..." in result[0]:
        del result[0]
    return result

#Static variables
class static:
    SHOWDIFF = False
    SHOWMISS = False
    
    def NOCOLORS():
        bcolors.HEADER = ''
        bcolors.OKBLUE = '\n\t'
        bcolors.OKGREEN = ''
        bcolors.WARNING = ''
        bcolors.FAIL = ''
        bcolors.END = ''
        bcolors.BOLD = ''
        bcolors.UNDERLINE = ''

def main(argv):
    ## Variables
    aptlist_one = ''
    aptlist_two = ''
    
    ## Begin if init
    try:
        opts, args = getopt.getopt(argv,'hdmc',['firstfile=','secondfile='])
    except getopt.GetoptError:
        print ("You used scuffed commands: Use '-h' for help.")
        sys.exit(2)
    ## End of init
    ## Begin of Args
    for opt, arg in opts:
        if opt == '-h':
            print (f"""{bcolors.HEADER}About:{bcolors.END}
    This script is meant to compare two lists of installed
    packages and print the differences. The 'firstfile' is
    taken as a control and will be compared to the 'secondfile'.
    Missing is shown as red and difference is shown as yellow

{bcolors.HEADER}Prep-work:{bcolors.END}
    Run this command:
        apt --installed list > aptlist
    
    On your host system and on the target system, append with
    either: "_one", or: "_two" respectively

{bcolors.HEADER}Usage:{bcolors.END}
    -h      Shows this page/text
    
    [-dc] --firstfile <aptlist_one> --secondfile <aptlist_two>
    
    -d:     Show every package even if there is no difference.
    
    -m:     Show missing packages. This can also mean missing
            packages from the target system and not the host.
            
    -c:     No colors (for dumping to a file). This changes the
            make-up of the file by putting the versions on a new
            line and indented respectively.

If you want only the missing files; add: ' | grep MISSING' to the
command, though, do read the description of '-m'.

If you want to save the results to a file you can use the output
symbol: '>' or append output: '>>' after the command. You can use
this in combination with the 'grep'-command for finer details,
though make sure you use -c or your file will not only be massive,
it'll also be rather unreadable.
""")
            sys.exit()
            
        elif opt == '-d':
            static.SHOWDIFF = True
        elif opt == '-m':
            static.SHOWMISS = True
        elif opt == '-c':
            static.NOCOLORS()
        #Filter and strip the lists so we remove any empty entires on load.
        elif opt in ('--firstfile'):
            aptlist_one = openAndStripFile(arg)
        elif opt in ('--secondfile'):
            aptlist_two = openAndStripFile(arg)
    ## End of Args
    
    for linefirst in aptlist_one:
        occurance = False
        instance = ''
        
        #Check for an occurance
        firstitem = linefirst.split('/')[0]
        missing, maxlen = 0, len(aptlist_two)
        for i, linesecond in enumerate(aptlist_two):
            if  firstitem in linesecond.split('/')[0]:
                instance, occurance = [ i, True ]
                break
            missing += 1
            
            #Since we know that if there is no occurance it's completely
            #missing, we can safely check against mac length.
            #print (str(missing) + " | " + str(maxlen))
            if missing == maxlen and static.SHOWMISS:
                print(f"{bcolors.FAIL}MISSING:{bcolors.END} {linefirst.split(' ')[0]}")
        
        if occurance:
            linefirstsplit = linefirst.split(' ')
            linesecondsplit = linesecond.split(' ')
            
            version = ""
            difference = 0
            if (len(linefirst) > len(linesecond)):
                difference, version = checkBigLineWithSmallLine(linefirstsplit[1], linesecondsplit[1])
            else:
                difference, version = checkBigLineWithSmallLine(linesecondsplit[1], linefirstsplit[1], False)
                
            result = f"{linefirstsplit[0]} {bcolors.OKBLUE}->{bcolors.END} {version} {bcolors.OKBLUE}->{bcolors.END} {bcolors.FAIL}{linesecondsplit[1]}{bcolors.END}"
            if static.SHOWDIFF:
                print(result)
            elif difference > 0:
                print(result)

if __name__ == "__main__":
    main(sys.argv[1:])
